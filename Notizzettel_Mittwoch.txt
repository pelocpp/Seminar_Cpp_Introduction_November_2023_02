C++ Einführung

Peter Loos

Mittwoch

=================================================================

a) C++ ist verdammt schwer.

b) Man kann seinen eigenen Quellcode stilistisch in verschieden Richtungen ausprägen.

“prozedurale” Programmierung
“objektorientierte” Programmierung
“generische” Programmierung (Templates)

// -----------------------

== Sprache mit Referenzen (Java, C#, JavaScript :  new )

== Sprache mit Werten und Referenzen (C++)


c) Wie sollte "ich" mich verhalten:

  Ich verwende nur die Sprachelemente, die ich beherrsche (in denen ich mich gut auskenne).

=================================================================

'a'

und 

"a"

==========

'a'

Mit Einzelhochkomma '' wird EIN Zeichen beschrieben 

(intern: ACII)

==========

"ABC":     Zeichenkette

Datentyp von "ABC":

Sicht aus "C":

Array von Character:

char viele_zeichen [4];  // terminierende Null  

C:

Achtung: Bitte keine Konfusion:

char: '0'   ==> 48 

char: '0'   ==> 0 

char ch = 0;   // NICHT '0' (48)

oder

char ch = '\0';  // Dezimal 0


=============================================


Sicht aus "C++":  std::string

size_t

Pedanten:

int:  Ganze Zahlen 

Pedanten:  Hmmmm, könnten auch negative Zahlen sein ...

Ne, ein neuer Datentyp muss her:

unsigned long long == size_t

a) size_t hat die Breite das Akkus (EAX)

b) size_t kennt nur positive Werte


std::isdigit(x)  ===> x = 0, 1, ... 9  (true) , sonst false


==========================================================

return (IsLeapYear(year)) ? 29 : 28;


// ternäre Operator: ?:

int result = ( bedingung ) ? expression1 :  expression2 ;

int result = ( IsLeapYear(year) ) ? 29 : 28;

Kurz:

if ( IsLeapYear(year) )  {
    result = 29;
}
else {
    result = 28;
}

C:

==========================================================

Arrays  // Liste // std::array 

"Dynamisch"

Felder in C++:  Wie in C.

int zahlen [10];  // Feld der Länge 10

         // FIXED SIZE !!!!!!!!!!!

int n;

std::cin >> n;  // Eine Zahl von der Konsole einlesen

int zahlen [n];  // NO WAY !!!!

Bitte: Dialekte von C: C99: da geht das.

Perl // Python // fast alle anderen:

List // Vektor // C#: Arraylist

Gibt es auch in C++:  Bibliothek.

std::list
std::array
std::vector  // Fixed-Size Array: UNTERSCHIED: Länge ist variabel

Übung: Dynamic Array

=============================================================

Dynamische Daten


C++ Programm:

A) Globale Variablen

B) Lokale Variablen (Zwischenergebnissen)

X) Instanzvariablen ==> Objekt

C) Dynamische Variablen:

   Wie lange lebt diese?

   Solange wie man sie benötigt !!!!

   new / delete

==================================

Zu jedem new gibt es ein delete !!!!!!!!!!!!!!!!!!


Wie kann ich Speicher länger aufheben ???

Mischung aus global (lokal) und dynamisch:

== Global: Game Programming   // Board

== Nächsten Zug berechnen :  

   Hmmm, da sind viele vorausschauende Berechnungen notwendig:

   Dynamische Daten würden sich hierzu eignen:  new / delete 

   "Anker": Zentrales Strategie-Objekt: Global


===================================================


new und delete in 2 Varianten:

A) Für eine einzelne Variable:

    "Scalar new" // "Scalar delete"


B) Für mehrere Variablen

    "Array new" // "Array delete"


    Was passiert bei "Scalar delete" mit vorangegangenem  "Array new" :

    UB  ---  Undefined Behaviour --- Komplexität von C++


Frage: Garbage Collector:

i) NO !!!!!!!!!!!!!

ii) Es gibt Smart Pointer: Diese übernehmen die Aufgabe des delete.

    std::shared_ptr =====> Etwas in Richtung Garbage Collector (Benutzt-Zähler)


Anwendung:

Algorithmen & Datenstrukturen
-----------------------------

Frage: Array : int zahlen [???];

new int [n]   ; n ????

Verkettete Liste
----------------

Linked List

std::forward_list

Ist nur mit new konstruierbar.

===========================================

Ein Beispiel:

Haben:

int zahlen [10];  // FIXED SIZE ARRAY

Nicht Haben:

Feld variabler Länge:

class DynamicArray  

Wo, wie übergeben wir die variable Länge:

== Konstruktor : Variable 
== setter


==================================

BILD !!!!!!!!!!!!!!!!!!!!!!!!!!!

==================================


new und delete:

DREI REGELN:

a) Ein 'new' ===> ein 'delete'

b) Ein 'new' ===> KEIN 'delete': Da ist ein Stück Speicher für ALLE Zeiten vergeben,
                  selbst wenn es den Zeiger, der ursprünglich via new zurückgegeben worden ist,
                  nicht mehr verfügbar ist.

c) Ein 'new' ===> ZWEI 'delete': Na und ???

                  NEIN: ABSTURZ: Warum. Das Laufzeitsystem, dass die Halde verwaltet,
                  ist nicht in der Lage, zu erkennen, ob eine Adresse gültig ist oder nicht.


===================================================

Philosophy of C:

"A programmer knows what he does"

Maschinenraum von C++:


== Destruktor
== Operator=
== Kopieren ....





